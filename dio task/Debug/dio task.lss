
dio task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000434  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000004a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4f  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075f  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000701  00000000  00000000  00001aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000021ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042a  00000000  00000000  00002724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002b4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  74:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
u8 bufferButtonStatus;
u8 counter;

void app_init()
{
	LED_init(LED_1_PORT,LED_1_PIN);
  7c:	64 e0       	ldi	r22, 0x04	; 4
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 b2 00 	call	0x164	; 0x164 <LED_init>
	LED_init(LED_2_PORT,LED_2_PIN);
  84:	65 e0       	ldi	r22, 0x05	; 5
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 b2 00 	call	0x164	; 0x164 <LED_init>
	LED_init(LED_3_PORT,LED_3_PIN);
  8c:	66 e0       	ldi	r22, 0x06	; 6
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 b2 00 	call	0x164	; 0x164 <LED_init>
	BUTTON_init(BUTTON_1_PORT,BUTTON_1_PIN);
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	84 e4       	ldi	r24, 0x44	; 68
  98:	0e 94 ab 00 	call	0x156	; 0x156 <BUTTON_init>
  9c:	08 95       	ret

0000009e <LedsOFF>:
}
void LedsOFF()
{
	LED_off(LED_1_PORT,LED_1_PIN);
  9e:	64 e0       	ldi	r22, 0x04	; 4
  a0:	81 e4       	ldi	r24, 0x41	; 65
  a2:	0e 94 bb 00 	call	0x176	; 0x176 <LED_off>
	LED_off(LED_2_PORT,LED_2_PIN);
  a6:	65 e0       	ldi	r22, 0x05	; 5
  a8:	81 e4       	ldi	r24, 0x41	; 65
  aa:	0e 94 bb 00 	call	0x176	; 0x176 <LED_off>
	LED_off(LED_3_PORT,LED_3_PIN);
  ae:	66 e0       	ldi	r22, 0x06	; 6
  b0:	81 e4       	ldi	r24, 0x41	; 65
  b2:	0e 94 bb 00 	call	0x176	; 0x176 <LED_off>
  b6:	08 95       	ret

000000b8 <appStart>:
}
void appStart()
{
	BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&buttonStatus);
  b8:	42 e6       	ldi	r20, 0x62	; 98
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	84 e4       	ldi	r24, 0x44	; 68
  c0:	0e 94 af 00 	call	0x15e	; 0x15e <BUTTON_read>
	bufferButtonStatus=buttonStatus;
  c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <buttonStatus>
  c8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <bufferButtonStatus>
	while(buttonStatus==HIGH)
  cc:	06 c0       	rjmp	.+12     	; 0xda <appStart+0x22>
	{
		BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&buttonStatus);
  ce:	42 e6       	ldi	r20, 0x62	; 98
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	84 e4       	ldi	r24, 0x44	; 68
  d6:	0e 94 af 00 	call	0x15e	; 0x15e <BUTTON_read>
}
void appStart()
{
	BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&buttonStatus);
	bufferButtonStatus=buttonStatus;
	while(buttonStatus==HIGH)
  da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <buttonStatus>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	b1 f3       	breq	.-20     	; 0xce <appStart+0x16>
	{
		BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&buttonStatus);
	}
	if(HIGH==bufferButtonStatus)
  e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <bufferButtonStatus>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	51 f4       	brne	.+20     	; 0xfe <appStart+0x46>
	{
		if(counter==5)
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	19 f4       	brne	.+6      	; 0xf8 <appStart+0x40>
		{
			counter=0;
  f2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	03 c0       	rjmp	.+6      	; 0xfe <appStart+0x46>
		}
		else
		{
			counter++;
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}
	else
	{
	}
	if(counter==0)
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	81 11       	cpse	r24, r1
 104:	03 c0       	rjmp	.+6      	; 0x10c <appStart+0x54>
	{
		LedsOFF();
 106:	0e 94 4f 00 	call	0x9e	; 0x9e <LedsOFF>
 10a:	08 95       	ret
	}
	else if(counter==1 ||counter==5)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	11 f0       	breq	.+4      	; 0x114 <appStart+0x5c>
 110:	85 30       	cpi	r24, 0x05	; 5
 112:	61 f4       	brne	.+24     	; 0x12c <appStart+0x74>
	{
		if(counter==1)
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	29 f4       	brne	.+10     	; 0x122 <appStart+0x6a>
		{
			LED_on(LED_1_PORT,LED_1_PIN);
 118:	64 e0       	ldi	r22, 0x04	; 4
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 b7 00 	call	0x16e	; 0x16e <LED_on>
 120:	08 95       	ret
		}
		else
		{
			LED_off(LED_2_PORT,LED_2_PIN);
 122:	65 e0       	ldi	r22, 0x05	; 5
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 bb 00 	call	0x176	; 0x176 <LED_off>
 12a:	08 95       	ret
		}
	}
	else if(counter==2 ||counter==4)
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	11 f0       	breq	.+4      	; 0x134 <appStart+0x7c>
 130:	84 30       	cpi	r24, 0x04	; 4
 132:	61 f4       	brne	.+24     	; 0x14c <appStart+0x94>
	{
		if(counter==2)
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	29 f4       	brne	.+10     	; 0x142 <appStart+0x8a>
		{
			LED_on(LED_2_PORT,LED_2_PIN);
 138:	65 e0       	ldi	r22, 0x05	; 5
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 b7 00 	call	0x16e	; 0x16e <LED_on>
 140:	08 95       	ret
		}
		else
		{
			LED_off(LED_3_PORT,LED_3_PIN);
 142:	66 e0       	ldi	r22, 0x06	; 6
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 bb 00 	call	0x176	; 0x176 <LED_off>
 14a:	08 95       	ret
		}
	}
	else
	{
		LED_on(LED_3_PORT,LED_3_PIN);
 14c:	66 e0       	ldi	r22, 0x06	; 6
 14e:	81 e4       	ldi	r24, 0x41	; 65
 150:	0e 94 b7 00 	call	0x16e	; 0x16e <LED_on>
 154:	08 95       	ret

00000156 <BUTTON_init>:

#include "buttons.h"

void BUTTON_init(u8 portNumber,u8 pinNumber)
{
	DIO_init(portNumber,pinNumber,IN);
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_init>
 15c:	08 95       	ret

0000015e <BUTTON_read>:
}
void BUTTON_read(u8 portNumber,u8 pinNumber,u8 *value)
{
	DIO_read(portNumber,pinNumber,value);
 15e:	0e 94 b4 01 	call	0x368	; 0x368 <DIO_read>
 162:	08 95       	ret

00000164 <LED_init>:

#include "LED.h"

void LED_init(u8 ledPort,u8 ledPin)
{
	DIO_init(ledPort,ledPort,OUT);
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	68 2f       	mov	r22, r24
 168:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_init>
 16c:	08 95       	ret

0000016e <LED_on>:
}
void LED_on(u8 ledPort,u8 ledPin)
{
	DIO_write(ledPort,ledPin,HIGH);
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_write>
 174:	08 95       	ret

00000176 <LED_off>:
}
void LED_off(u8 ledPort,u8 ledPin)
{
	DIO_write(ledPort,ledPin,LOW);
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_write>
 17c:	08 95       	ret

0000017e <main>:

#include "Application/Application.h"

int main(void)
{
	app_init();
 17e:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
    /* Replace with your application code */
    while (1) 
	{
		appStart();
 182:	0e 94 5c 00 	call	0xb8	; 0xb8 <appStart>
 186:	fd cf       	rjmp	.-6      	; 0x182 <main+0x4>

00000188 <DIO_init>:
#include "DIO.h"


void DIO_init(u8 portNumber,u8 pinNumber,u8 direction)
{
	switch(portNumber)
 188:	82 34       	cpi	r24, 0x42	; 66
 18a:	29 f1       	breq	.+74     	; 0x1d6 <DIO_init+0x4e>
 18c:	18 f4       	brcc	.+6      	; 0x194 <DIO_init+0xc>
 18e:	81 34       	cpi	r24, 0x41	; 65
 190:	39 f0       	breq	.+14     	; 0x1a0 <DIO_init+0x18>
 192:	08 95       	ret
 194:	83 34       	cpi	r24, 0x43	; 67
 196:	d1 f1       	breq	.+116    	; 0x20c <DIO_init+0x84>
 198:	84 34       	cpi	r24, 0x44	; 68
 19a:	09 f4       	brne	.+2      	; 0x19e <DIO_init+0x16>
 19c:	52 c0       	rjmp	.+164    	; 0x242 <DIO_init+0xba>
 19e:	08 95       	ret
	{
		case PORT_A:
		if(direction==OUT)
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	59 f4       	brne	.+22     	; 0x1ba <DIO_init+0x32>
		{
		DDRA |=(1<<pinNumber);
 1a4:	2a b3       	in	r18, 0x1a	; 26
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_init+0x28>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_init+0x24>
 1b4:	82 2b       	or	r24, r18
 1b6:	8a bb       	out	0x1a, r24	; 26
 1b8:	08 95       	ret
		}
		else if(direction==IN)
 1ba:	41 11       	cpse	r20, r1
 1bc:	5c c0       	rjmp	.+184    	; 0x276 <DIO_init+0xee>
		{
			
			DDRA &= ~(1<<pinNumber);
 1be:	2a b3       	in	r18, 0x1a	; 26
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_init+0x42>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_init+0x3e>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	8a bb       	out	0x1a, r24	; 26
 1d4:	08 95       	ret
			//error handling
		}
		break;
		
		case PORT_B:
		if(direction==OUT)
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <DIO_init+0x68>
		{
			DDRB |=(1<<pinNumber);
 1da:	27 b3       	in	r18, 0x17	; 23
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_init+0x5e>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_init+0x5a>
 1ea:	82 2b       	or	r24, r18
 1ec:	87 bb       	out	0x17, r24	; 23
 1ee:	08 95       	ret
		}
		else if(direction==IN)
 1f0:	41 11       	cpse	r20, r1
 1f2:	41 c0       	rjmp	.+130    	; 0x276 <DIO_init+0xee>
		{
					
			DDRB &= ~(1<<pinNumber);
 1f4:	27 b3       	in	r18, 0x17	; 23
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_init+0x78>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_init+0x74>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	87 bb       	out	0x17, r24	; 23
 20a:	08 95       	ret
			//error handling
		}
		break;
		
		case PORT_C:
		if(direction==OUT)
 20c:	41 30       	cpi	r20, 0x01	; 1
 20e:	59 f4       	brne	.+22     	; 0x226 <DIO_init+0x9e>
		{
			DDRC |=(1<<pinNumber);
 210:	24 b3       	in	r18, 0x14	; 20
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_init+0x94>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_init+0x90>
 220:	82 2b       	or	r24, r18
 222:	84 bb       	out	0x14, r24	; 20
 224:	08 95       	ret
		}
		else if(direction==IN)
 226:	41 11       	cpse	r20, r1
 228:	26 c0       	rjmp	.+76     	; 0x276 <DIO_init+0xee>
		{
			
			DDRC &= ~(1<<pinNumber);
 22a:	24 b3       	in	r18, 0x14	; 20
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_init+0xae>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_init+0xaa>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	84 bb       	out	0x14, r24	; 20
 240:	08 95       	ret
			//error handling
		}
		break;
		
		case PORT_D:
		if(direction==OUT)
 242:	41 30       	cpi	r20, 0x01	; 1
 244:	59 f4       	brne	.+22     	; 0x25c <DIO_init+0xd4>
		{
			DDRD |=(1<<pinNumber);
 246:	21 b3       	in	r18, 0x11	; 17
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_init+0xca>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_init+0xc6>
 256:	82 2b       	or	r24, r18
 258:	81 bb       	out	0x11, r24	; 17
 25a:	08 95       	ret
		}
		else if(direction==IN)
 25c:	41 11       	cpse	r20, r1
 25e:	0b c0       	rjmp	.+22     	; 0x276 <DIO_init+0xee>
		{
			
			DDRD &= ~(1<<pinNumber);
 260:	21 b3       	in	r18, 0x11	; 17
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_init+0xe4>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_init+0xe0>
 270:	80 95       	com	r24
 272:	82 23       	and	r24, r18
 274:	81 bb       	out	0x11, r24	; 17
 276:	08 95       	ret

00000278 <DIO_write>:



void DIO_write(u8 portNumber,u8 pinNumber,u8 value)
{
	switch(portNumber)
 278:	82 34       	cpi	r24, 0x42	; 66
 27a:	29 f1       	breq	.+74     	; 0x2c6 <DIO_write+0x4e>
 27c:	18 f4       	brcc	.+6      	; 0x284 <DIO_write+0xc>
 27e:	81 34       	cpi	r24, 0x41	; 65
 280:	39 f0       	breq	.+14     	; 0x290 <DIO_write+0x18>
 282:	08 95       	ret
 284:	83 34       	cpi	r24, 0x43	; 67
 286:	d1 f1       	breq	.+116    	; 0x2fc <DIO_write+0x84>
 288:	84 34       	cpi	r24, 0x44	; 68
 28a:	09 f4       	brne	.+2      	; 0x28e <DIO_write+0x16>
 28c:	52 c0       	rjmp	.+164    	; 0x332 <DIO_write+0xba>
 28e:	08 95       	ret
	{
		case PORT_A:
		if(value==HIGH)
 290:	41 30       	cpi	r20, 0x01	; 1
 292:	59 f4       	brne	.+22     	; 0x2aa <DIO_write+0x32>
		{
			PORTA |=(1<<pinNumber);
 294:	2b b3       	in	r18, 0x1b	; 27
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_write+0x28>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_write+0x24>
 2a4:	82 2b       	or	r24, r18
 2a6:	8b bb       	out	0x1b, r24	; 27
 2a8:	08 95       	ret
		}
		else if(value==LOW)
 2aa:	41 11       	cpse	r20, r1
 2ac:	5c c0       	rjmp	.+184    	; 0x366 <DIO_write+0xee>
		{
				
			PORTA &= ~(1<<pinNumber);
 2ae:	2b b3       	in	r18, 0x1b	; 27
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_write+0x42>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_write+0x3e>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	8b bb       	out	0x1b, r24	; 27
 2c4:	08 95       	ret
			//error handling
		}
		break;
			
		case PORT_B:
		if(value==HIGH)
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	59 f4       	brne	.+22     	; 0x2e0 <DIO_write+0x68>
		{
			PORTB |=(1<<pinNumber);
 2ca:	28 b3       	in	r18, 0x18	; 24
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_write+0x5e>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_write+0x5a>
 2da:	82 2b       	or	r24, r18
 2dc:	88 bb       	out	0x18, r24	; 24
 2de:	08 95       	ret
		}
		else if(value==LOW)
 2e0:	41 11       	cpse	r20, r1
 2e2:	41 c0       	rjmp	.+130    	; 0x366 <DIO_write+0xee>
		{
				
			PORTB &= ~(1<<pinNumber);
 2e4:	28 b3       	in	r18, 0x18	; 24
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_write+0x78>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_write+0x74>
 2f4:	80 95       	com	r24
 2f6:	82 23       	and	r24, r18
 2f8:	88 bb       	out	0x18, r24	; 24
 2fa:	08 95       	ret
			//error handling
		}
		break;
			
		case PORT_C:
		if(value==HIGH)
 2fc:	41 30       	cpi	r20, 0x01	; 1
 2fe:	59 f4       	brne	.+22     	; 0x316 <DIO_write+0x9e>
		{
			PORTC |=(1<<pinNumber);
 300:	25 b3       	in	r18, 0x15	; 21
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_write+0x94>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_write+0x90>
 310:	82 2b       	or	r24, r18
 312:	85 bb       	out	0x15, r24	; 21
 314:	08 95       	ret
		}
		else if(value==LOW)
 316:	41 11       	cpse	r20, r1
 318:	26 c0       	rjmp	.+76     	; 0x366 <DIO_write+0xee>
		{
				
			PORTC &= ~(1<<pinNumber);
 31a:	25 b3       	in	r18, 0x15	; 21
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_write+0xae>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_write+0xaa>
 32a:	80 95       	com	r24
 32c:	82 23       	and	r24, r18
 32e:	85 bb       	out	0x15, r24	; 21
 330:	08 95       	ret
			//error handling
		}
		break;
			
		case PORT_D:
		if(value==HIGH)
 332:	41 30       	cpi	r20, 0x01	; 1
 334:	59 f4       	brne	.+22     	; 0x34c <DIO_write+0xd4>
		{
			PORTD |=(1<<pinNumber);
 336:	22 b3       	in	r18, 0x12	; 18
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_write+0xca>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_write+0xc6>
 346:	82 2b       	or	r24, r18
 348:	82 bb       	out	0x12, r24	; 18
 34a:	08 95       	ret
		}
		else if(value==LOW)
 34c:	41 11       	cpse	r20, r1
 34e:	0b c0       	rjmp	.+22     	; 0x366 <DIO_write+0xee>
		{
				
			PORTD &= ~(1<<pinNumber);
 350:	22 b3       	in	r18, 0x12	; 18
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_write+0xe4>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_write+0xe0>
 360:	80 95       	com	r24
 362:	82 23       	and	r24, r18
 364:	82 bb       	out	0x12, r24	; 18
 366:	08 95       	ret

00000368 <DIO_read>:

	}
}
void DIO_read(u8 portNumber,u8 pinNumber,u8 *value)
{
	switch(portNumber)
 368:	82 34       	cpi	r24, 0x42	; 66
 36a:	01 f1       	breq	.+64     	; 0x3ac <DIO_read+0x44>
 36c:	18 f4       	brcc	.+6      	; 0x374 <DIO_read+0xc>
 36e:	81 34       	cpi	r24, 0x41	; 65
 370:	39 f0       	breq	.+14     	; 0x380 <DIO_read+0x18>
 372:	08 95       	ret
 374:	83 34       	cpi	r24, 0x43	; 67
 376:	81 f1       	breq	.+96     	; 0x3d8 <DIO_read+0x70>
 378:	84 34       	cpi	r24, 0x44	; 68
 37a:	09 f4       	brne	.+2      	; 0x37e <DIO_read+0x16>
 37c:	43 c0       	rjmp	.+134    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 37e:	08 95       	ret
	{
		case PORT_A:
		*value=(PINA &(1<<pinNumber))>>pinNumber;
 380:	79 b3       	in	r23, 0x19	; 25
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	9c 01       	movw	r18, r24
 388:	06 2e       	mov	r0, r22
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_read+0x28>
 38c:	22 0f       	add	r18, r18
 38e:	33 1f       	adc	r19, r19
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_read+0x24>
 394:	87 2f       	mov	r24, r23
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	82 23       	and	r24, r18
 39a:	93 23       	and	r25, r19
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_read+0x3a>
 39e:	95 95       	asr	r25
 3a0:	87 95       	ror	r24
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_read+0x36>
 3a6:	fa 01       	movw	r30, r20
 3a8:	80 83       	st	Z, r24
		break;
 3aa:	08 95       	ret
			
		case PORT_B:
        *value=(PINB &(1<<pinNumber))>>pinNumber;
 3ac:	76 b3       	in	r23, 0x16	; 22
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	9c 01       	movw	r18, r24
 3b4:	06 2e       	mov	r0, r22
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_read+0x54>
 3b8:	22 0f       	add	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_read+0x50>
 3c0:	87 2f       	mov	r24, r23
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	82 23       	and	r24, r18
 3c6:	93 23       	and	r25, r19
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_read+0x66>
 3ca:	95 95       	asr	r25
 3cc:	87 95       	ror	r24
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_read+0x62>
 3d2:	fa 01       	movw	r30, r20
 3d4:	80 83       	st	Z, r24
		break;
 3d6:	08 95       	ret
			
		case PORT_C:
		*value=(PINC &(1<<pinNumber))>>pinNumber;
 3d8:	73 b3       	in	r23, 0x13	; 19
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	9c 01       	movw	r18, r24
 3e0:	06 2e       	mov	r0, r22
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_read+0x80>
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_read+0x7c>
 3ec:	87 2f       	mov	r24, r23
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	82 23       	and	r24, r18
 3f2:	93 23       	and	r25, r19
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_read+0x92>
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_read+0x8e>
 3fe:	fa 01       	movw	r30, r20
 400:	80 83       	st	Z, r24
		break;
 402:	08 95       	ret
			
		case PORT_D:
		*value=(PIND &(1<<pinNumber))>>pinNumber;
 404:	70 b3       	in	r23, 0x10	; 16
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	9c 01       	movw	r18, r24
 40c:	06 2e       	mov	r0, r22
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	87 2f       	mov	r24, r23
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	82 23       	and	r24, r18
 41e:	93 23       	and	r25, r19
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	95 95       	asr	r25
 424:	87 95       	ror	r24
 426:	6a 95       	dec	r22
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	fa 01       	movw	r30, r20
 42c:	80 83       	st	Z, r24
 42e:	08 95       	ret

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
